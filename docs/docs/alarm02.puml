@startuml
!theme vibrant
top to bottom direction

title STORASENSE (Top-Down)

package "Edge / Datenerfassung" {
  cloud "IoT-Geräte\n(Sensoren & Aktoren)" as devices
  component "MQTT Mosquitto\nBroker" as mqtt
}

package "Streaming & Integrations-Plattform" {
    frame "Apache Kafka Cluster" {
      queue "Topic 'iot-sensordata'" as topic_raw
      queue "Topic 'alarme'" as topic_alarms
    }
    package "Kafka Connect" {
      component "MQTT Source\n(Daten -> Kafka)" as connect_source
      component "MQTT Sink\n(Kafka -> Daten)" as connect_sink
    }
}

   package "Alarm-Echtzeit-Analyse" {
      component "Alarmservice\n(Kafka Streams)" as alarmservice
    }

   package "MQTT-Client" {
      component "MQTT-Client (Skript)" as mqttclient
    }

    package "Backend API & Persistenz" {
      component "Backend API" as api
      database "Datenbank" as db
    }

' Parallel Services consuming from Kafka
package "Anwendungs-Ebene" {

    package "Anwendungsebene" {
      interface "Dashboard" as dashboard
      actor "Benutzer" as user
    }
}



' Hinfluss: Von den Geräten zur Analyse
devices --> mqtt : 1. Sendet Sensordaten
mqtt --> connect_source : 2. Abonniert Topics
connect_source --> topic_raw : 3. Schreibt Rohdaten

topic_raw --> alarmservice : 4. Konsumiert Rohdaten
alarmservice --> topic_alarms : 5. Schreibt Alarme

' Datenfluss zur API und zum Benutzer
topic_alarms --> api : 6. Konsumiert Alarme
api --> db : Speichert Daten
api --> dashboard : 7. Liefert Daten an UI
dashboard <-- user

' Rückfluss: Von Kafka zurück zu den Geräten
topic_alarms --> connect_sink : 8. Konsumiert Alarme/Befehle
connect_sink --> mqtt : 9. Schreibt Befehl
mqtt --> devices : 10. Aktor empfängt Befehl

' MQTT-Client für Sensordaten
mqttclient --> api : Sendet Sensordaten
mqtt --> mqttclient : MQTT-Verbindung

@enduml
