@startuml
' --- Styling ---
!theme plain
skinparam shadowing false
skinparam actorStyle awesome
skinparam rectangle {
    borderRadius 5
}
skinparam database {
    borderRadius 5
}
skinparam component {
    borderRadius 5
}
skinparam node {
    borderColor #666666
}
' Styling f체r das Netzwerk-Paket
skinparam package {
    borderColor #333333
    borderStyle dashed
}

' --- Akteure ---
actor "Client (Webbrowser)" as User
node "IoT-Ger채t\n(Arduino)" as Device


' --- Deployment-Knoten ---
node "Server-Infrastruktur (Docker Host)" as Server {
    ' Dieses Paket repr채sentiert die logische Grenze des Docker Compose Netzwerks
    package "Docker Compose Network" as DockerNetwork {
        node "Frontend-Container" as FrontendContainer {
            component "Frontend\n(Next.js)" as Frontend
        }
        node "FastAPI-Container" as FastAPIContainer {
            component "Backend\n(FastAPI exposed\nREST API)" as Backend
        }
        node "PostgreSQl-Container" as PostgresContainer {
           database "PostgreSQl \n mit TimescaleDB" as Postgres
        }

    }

    node "MQTT-Broker-Container" as MqttBrokerContainer {
        component "MQTT Broker" as MqttBroker
    }
}

' --- Beziehungen und Datenfl체sse ---
' Externe Kommunikation zu den exponierten Ports der Container
User -right-> Frontend : Nutzt das Dashboard (HTTPS)
Device .up.> MqttBroker: Sendet Sensordaten (MQTT)

' Interne Kommunikation innerhalb des Docker-Netzwerks
Frontend .down.> Backend : API-Anfragen (HTTPS)
Backend .right.> MqttBroker : Subscribed/Published

' Spezielle Interaktion via Shared Volume, keine Netzwerkkommunikation
Backend ..> Postgres : "Interagiert via\nShared Volume"

@enduml
