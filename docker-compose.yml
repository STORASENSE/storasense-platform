services:

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.storasense.de`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_HASHED}"
      # Global Middleware for HTTPS redirection
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: always
    environment:
      - KC_DB=postgres
      - KC_DB_URL_HOST=${POSTGRES_HOST} # Use timescaledb as the database
      - KC_DB_URL_DATABASE=${POSTGRES_KC_DB_NAME}
      - KC_DB_USERNAME=${POSTGRES_KC_DB_USER}
      - KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=auth.storasense.de
      - KC_PROXY=edge
      - KC_PROXY_HEADERS=xforwarded
      - KC_CACHE=local
    command: start
    networks:
      storasense-network:
        aliases:
          - auth.storasense.de # use url auth.storasense.de for internal communication
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak-http.rule=Host(`auth.storasense.de`)"
      - "traefik.http.routers.keycloak-http.entrypoints=web"
      - "traefik.http.routers.keycloak-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.keycloak-https.rule=Host(`auth.storasense.de`)"
      - "traefik.http.routers.keycloak-https.entrypoints=websecure"
      - "traefik.http.routers.keycloak-https.tls=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

      - "traefik.http.routers.keycloak-https.middlewares=secure-headers"
      - "traefik.http.middlewares.secure-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.browserxssfilter=true"
    depends_on:
      timescaledb:
        condition: service_healthy

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_KC_DB_NAME=${POSTGRES_KC_DB_NAME}
      - POSTGRES_KC_DB_USER=${POSTGRES_KC_DB_USER}
      - POSTGRES_KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
    volumes:
      - storasense_data_volume:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - storasense-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backup:
    image: offen/docker-volume-backup
    container_name: storasense-backup
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - storasense_data_volume:/volume/storasense_data_volume:ro # Mount the data volume to back-up
      - ./storasense_data_volume_backup:/backup # Location to store backups (here: local directory)
    networks:
      - storasense-network
    environment:
      - "BACKUP_CRON_EXPRESSION=0 3 * * *" # Every day at 3 AM
      - "BACKUP_SOURCES=/volume/storasense_data_volume" # Source to back-up
      - "BACKUP_FILENAME=storasense_db_backup-%Y-%m-%d_%H-%M-%S.tar.gz"
      - "BACKUP_PRUNE_AFTER_DAYS=7" # Delete backups older than 7 days
      - "BACKUP_TARGET=file:///backup" # Backup destination (here: local directory)
    depends_on:
      - frontend # Start after the whole system is up

  app:
    image: ghcr.io/storasense/storasense-platform/storasense-backend-app:latest
    env_file: .env
    restart: always
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-http.rule=Host(`api.storasense.de`)"
      - "traefik.http.routers.app-http.entrypoints=web"
      - "traefik.http.routers.app-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.app-https.rule=Host(`api.storasense.de`)"
      - "traefik.http.routers.app-https.entrypoints=websecure"
      - "traefik.http.routers.app-https.tls=true"
      - "traefik.http.services.app.loadbalancer.server.port=8000"

    depends_on:
      timescaledb:
        condition: service_healthy
      keycloak:
        condition: service_started

  mqtt-client:
    image: ghcr.io/storasense/storasense-platform/storasense-backend-mqtt-client:latest
    env_file: .env
    restart: on-failure
    networks:
      - storasense-network
    depends_on:
      - app

  frontend:
    #image: ghcr.io/storasense/storasense-platform/storasense-frontend:latest
    build :
      context: .
      dockerfile: ./frontend/Dockerfile
    restart: always
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-http.rule=Host(`storasense.de`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      - "traefik.http.routers.frontend-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.frontend-https.rule=Host(`storasense.de`)"
      - "traefik.http.routers.frontend-https.entrypoints=websecure"
      - "traefik.http.routers.frontend-https.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      keycloak:
        condition: service_started
      app:
        condition: service_started

volumes:
  storasense_data_volume:

networks:
  storasense-network:
    driver: bridge
  host:
    external: true
    name: host
