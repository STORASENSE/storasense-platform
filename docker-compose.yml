services:

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.storasense.de`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_HASHED}"
      # Global Middleware for HTTPS redirection
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: always
    environment:
      - KC_DB=postgres
      - KC_DB_URL_HOST=${POSTGRES_HOST} # Use timescaledb as the database
      - KC_DB_URL_DATABASE=${POSTGRES_KC_DB_NAME}
      - KC_DB_USERNAME=${POSTGRES_KC_DB_USER}
      - KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=auth.storasense.de
      - KC_PROXY=edge
      - KC_PROXY_HEADERS=xforwarded
      - KC_CACHE=local
    command: start
    networks:
      storasense-network:
        aliases:
          - auth.storasense.de # use url auth.storasense.de for internal communication
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak-http.rule=Host(`auth.storasense.de`)"
      - "traefik.http.routers.keycloak-http.entrypoints=web"
      - "traefik.http.routers.keycloak-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.keycloak-https.rule=Host(`auth.storasense.de`)"
      - "traefik.http.routers.keycloak-https.entrypoints=websecure"
      - "traefik.http.routers.keycloak-https.tls=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

      - "traefik.http.routers.keycloak-https.middlewares=secure-headers"
      - "traefik.http.middlewares.secure-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.browserxssfilter=true"
    depends_on:
      timescaledb:
        condition: service_healthy

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_KC_DB_NAME=${POSTGRES_KC_DB_NAME}
      - POSTGRES_KC_DB_USER=${POSTGRES_KC_DB_USER}
      - POSTGRES_KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
    volumes:
      - storasense_data_volume:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - storasense-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backup:
    image: offen/docker-volume-backup
    container_name: storasense-backup
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - storasense_data_volume:/volume/storasense_data_volume:ro
      - ./storasense_data_volume_backup:/backup
    networks:
      - storasense-network
    environment:
      - "BACKUP_CRON_EXPRESSION=0 3 * * *"
      - "BACKUP_SOURCES=/volume/storasense_data_volume"
      - "BACKUP_FILENAME=storasense_db_backup-%Y-%m-%d_%H-%M-%S.tar.gz"
      - "BACKUP_PRUNE_AFTER_DAYS=7"
      - "BACKUP_TARGET=file:///backup"
    depends_on:
      - frontend

  app:
    image: ghcr.io/storasense/storasense-platform/storasense-backend-app:latest
    env_file: .env
    restart: always
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-http.rule=Host(`api.storasense.de`)"
      - "traefik.http.routers.app-http.entrypoints=web"
      - "traefik.http.routers.app-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.app-https.rule=Host(`api.storasense.de`)"
      - "traefik.http.routers.app-https.entrypoints=websecure"
      - "traefik.http.routers.app-https.tls=true"
      - "traefik.http.services.app.loadbalancer.server.port=8000"

    depends_on:
      timescaledb:
        condition: service_healthy
      keycloak:
        condition: service_started

  mqtt-client:
    image: ghcr.io/storasense/storasense-platform/storasense-backend-mqtt-client:latest
    env_file: .env
    restart: on-failure
    networks:
      - storasense-network
    depends_on:
      - app

  frontend:
    image: ghcr.io/storasense/storasense-platform/storasense-frontend:latest
    restart: always
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-http.rule=Host(`storasense.de`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      - "traefik.http.routers.frontend-http.middlewares=https-redirect@docker"

      - "traefik.http.routers.frontend-https.rule=Host(`storasense.de`)"
      - "traefik.http.routers.frontend-https.entrypoints=websecure"
      - "traefik.http.routers.frontend-https.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      keycloak:
        condition: service_started
      app:
        condition: service_started

#  # Kafka setup:
#  # Apache Kafka in KRAFT mode (without zookeper)
#  kafka:
#    image: bitnami/kafka:3.6
#    container_name: kafka
#    restart: unless-stopped
#    environment:
#      - KAFKA_CFG_NODE_ID=1
#      - KAFKA_CFG_PROCESS_ROLES=broker,controller
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
#      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
#      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
#      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
#    networks:
#      - storasense-network
#
#  # Kafka UI (Redpanda Console)
#  kafka-ui:
#    image: redpandadata/console:latest
#    container_name: kafka-ui
#    restart: unless-stopped
#    environment:
#      - KAFKA_BROKERS=kafka:9092
#    depends_on:
#      - kafka
#    networks:
#      - storasense-network
#    # Add labels for Traefik routing
#
#  # Kafka Connect, loading MQTT-Connectoren from ./connect-plugins
#  kafka-connect:
#    image: confluentinc/cp-kafka-connect:7.5.0
#    container_name: kafka-connect
#    restart: unless-stopped
#    environment:
#      - CONNECT_BOOTSTRAP_SERVERS=kafka:9092
#      - CONNECT_REST_PORT=8083
#      - CONNECT_GROUP_ID=connect-cluster
#      - CONNECT_CONFIG_STORAGE_TOPIC=_connect-configs
#      - CONNECT_OFFSET_STORAGE_TOPIC=_connect-offsets
#      - CONNECT_STATUS_STORAGE_TOPIC=_connect-status
#      - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
#      - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
#      - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
#      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
#      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter
#      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
#      - CONNECT_PLUGIN_PATH=/usr/share/confluent-hub-components,/connect-plugins
#    volumes:
#      - ./connect-plugins:/connect-plugins
#      - ./connect-secrets:/opt/connect-secrets:ro
#      - ./connectors:/opt/connectors:ro
#    depends_on:
#      - kafka
#    networks:
#      - storasense-network
#
#  # Topic-Creation for Kafka
#  kafka-init:
#    image: bitnami/kafka:3.6
#    container_name: kafka-init
#    depends_on:
#      - kafka
#    command:
#      - bash
#      - -c
#      - |
#        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic iot-sensordata --partitions 6 --replication-factor 1;
#        /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic alarme --partitions 3 --replication-factor 1;
#    networks:
#      - storasense-network
#    restart: "no"
#
#  # Alarmservice
#  alarmservice:
#    image: ghcr.io/storasense/storasense-platform/storasense-alarmservice:latest
#    container_name: alarmservice
#    restart: unless-stopped
#    environment:
#      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#      - INPUT_TOPIC=iot-sensordata
#      - OUTPUT_TOPIC=alarme
#      - WINDOW_SECONDS=30
#      - THRESHOLD_VALUE=40.0
#    depends_on:
#      - kafka
#    networks:
#      - storasense-network

volumes:
  storasense_data_volume:

networks:
  storasense-network:
    driver: bridge
  host:
    external: true
    name: host
