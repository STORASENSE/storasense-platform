services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080" # Traefik Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - storasense-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: unless-stopped
    environment:
      - KC_DB=postgres
      - KC_DB_URL_HOST=${POSTGRES_HOST} # Use timescaledb as the database
      - KC_DB_URL_DATABASE=${POSTGRES_KC_DB_NAME}
      - KC_DB_USERNAME=${POSTGRES_KC_DB_USER}
      - KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=auth.storasense.de
      - KC_PROXY=edge
      - KC_PROXY_HEADERS=xforwarded
      - KC_CACHE=local
      - KEYCLOAK_INTERNAL_URL=${KEYCLOAK_INTERNAL_URL}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    command: start
    ports:
      - "8088:8080"
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.storasense.de`)&& !PathPrefix(`/admin`)"
      - "traefik.http.routers.keycloak.entrypoints=web"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    depends_on:
      timescaledb:
        condition: service_healthy

  app:
    build:
      context: .
      dockerfile: ./backend/src/app/Dockerfile
    env_file: .env
    restart: always
    networks:
      - storasense-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.routers.app.rule=Host(`api.storasense.de`)"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
    depends_on:
      timescaledb:
        condition: service_healthy
      keycloak:
        condition: service_started

  mqtt-client:
    build:
      context: .
      dockerfile: ./backend/src/mqtt_client/Dockerfile
    env_file: .env
    restart: always
    networks:
      - storasense-network

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_KC_DB_NAME=${POSTGRES_KC_DB_NAME}
      - POSTGRES_KC_DB_USER=${POSTGRES_KC_DB_USER}
      - POSTGRES_KC_DB_PASSWORD=${POSTGRES_KC_DB_PASSWORD}
    volumes:
      - storasense_data_volume:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - storasense-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  storasense_data_volume:

networks:
  storasense-network:
    driver: bridge
